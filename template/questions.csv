10進数から2進数へ変換することや、2進数から10進数へ変換することなどのこと。,16進数,浮動小数点形式,基数変換,桁落ち,基数変換
「0」から「9」の10種類の数字と、「A」から「F」までの６種類の文字を使用して、数値を表現するもの。,2進数,16進数,10進数,小数,16進数
10進数の各桁をそれぞれ4ビットの2進数で表現したもの。,2進化10進数,固定小数点形式,補数,クロック周波数,2進化10進数
小数点の位置を固定して、2進数の並びで数値を表現したもの。,浮動小数点形式,トップダウンテスト,丸め誤差,固定小数点形式,固定小数点形式
正負の符号を表す符号部、小数点の位置を表す指数部、有効数字を表す仮数部により数値を表現したもの。,補数,クラス,浮動小数点形式,MIPS,浮動小数点形式
ある数から別の数を引いた結果得られる数のこと。コンピュータが減算処理をしやすくするために利用する。,情報落ち,丸め誤差,補数,クロック周波数,補数
CPUやメモリの動作の基準となる信号を1秒間に発生させる回数で、Hz(ヘルツ)で表す。,スタブ,ドライバ,回帰テスト,クロック周波数,クロック周波数
コンピュータの処理速度を測るために、1秒間に実行できる命令を100万回単位で表したもの。,MIPS,論理演算,インスタンス,オブジェクト,MIPS
絶対値の大きさが極端に異なる数の加算や減算を行ったときに、絶対値の小さい数の全てまたは一部が無視されてしまう現象。,情報落ち,10進数,スタブ,キュー,情報落ち
計算結果が0に極端に近くなるような浮動小数点形式を行ったときに、有効数字の桁数がすくなくなること。,MIPS,桁落ち,丸め誤差,基数変換,桁落ち
数値表現の桁数に限度があるとき、四捨五入、切り上げまたは切り捨てにより、最小の桁より小さい部分について生じる誤差。,丸め誤差,情報落ち,論理回路,論理演算,丸め誤差
論理演算を行う電子回路。,NOT回路,OR回路,論理回路,XOR回路,論理回路
二つの入力がともに「1」の場合のみ、「1」を出力する回路。,OR回路,NOT回路,AND回路,XOR回路,AND回路
二つの入力のうち少なくともどちらかが、「1」の場合のとき、「1」を出力する回路。,NOT回路,OR回路,XOR回路,AND回路,OR回路
一つの入力に対し一つの出力を持つ論理回路。入力が「0」のとき「1」を出力し、入力が「1」のとき「0」を出力する回路。,NOT回路,XOR回路,AND回路,OR回路,NOT回路
二つの入力のうちどちらか一方のみが「1」の場合のとき、「1」を出力する回路。,XOR回路,AND回路,OR回路,NOT回路,XOR回路
論理演算を視覚的にわかりやすく表現する手法。,ベン図,スタブ,オブジェクト指向,算術シフト,ベン図
「1」または「0」の入力値に対して、一つの演算結果を出力する回路,AND回路,論理演算,ベン図,XOR回路,論理演算
階層構造のモジュール群からなるソフトウェアのテストの進め方の一つで、最上位モジュールから順次下位へとテストをすすめていく方法,スタブ,ボトムアップテスト,トップダウンテスト,ドライバ,トップダウンテスト
トップダウンテスト方式でプログラムを開発する時のテスト用のモジュール。,スタブ,クラス,インスタンス,ドライバ,スタブ
階層構造のモジュール群からなるソフトウェアのテストの進め方の一つで、最下位モジュールから順次上位へとテストをすすめていく方法,スタブ,ボトムアップテスト,トップダウンテスト,ドライバ,ボトムアップテスト
ボトムアップテスト方式でプログラムを開発する時のテスト用のモジュール。,スタブ,クラス,インスタンス,ドライバ,ドライバ
システムの修正により、修正していないほかの機能に影響を与えるかどうかを検証するテスト。,負荷テスト,機能テスト,回帰テスト,性能テスト,回帰テスト
ハードウェアやソフトウェアに短時間に大量のデータを与えるなどしても正常に機能するかを調べるテスト。,負荷テスト,機能テスト,回帰テスト,性能テスト,負荷テスト
システムやソフトウェアが要求された役割を満たしているかどうかを検証するテスト。,負荷テスト,機能テスト,回帰テスト,性能テスト,機能テスト
システムの応答時間や処理速度を設計したときの基準を満たしているか検証するテスト。,負荷テスト,機能テスト,回帰テスト,性能テスト,性能テスト
2進数のあるビット数分を左もしくは右にシフトした後、空いたビットを「0」で埋めること。,性能テスト,論理シフト,算術シフト,リスト,論理シフト
2進数の符号を表すビットは固定し、あるビット数分を左にシフトしたときは空いたビットを「0」で埋め、右にシフトしたときは空いたビットに符号と同じ値で埋めること。,性能テスト,論理シフト,算術シフト,リスト,算術シフト
データ構造について、最初に追加されたデータが最初に取り出される方式。,キュー,ポインタ,スタック,リスト,キュー
データ構造について、最後に追加されたデータ最初に取り出される方式。,キュー,ポインタ,スタック,リスト,スタック
データの位置を示す値によって繋げられたデータ構造。,リスト,ポインタ,キュー,スタック,リスト
次のデータの格納場所を示す値。,リスト,ポインタ,木構造,スタック,ポインタ
階層の上位から下位に接点をたどることによって、データを取り出すことができる構造。,木構造,ポインタ,キュー,インスタンス,木構造
システムの設計で、システムを処理や操作の対象となるもの(オブジェクト)同士のやり取りの関係として設計する考え方。,インスタンス,スタブ,オブジェクト指向,ドライバ,オブジェクト指向
システムの設計で、処理や操作の対象となるもの。,オブジェクト指向,クラス,オブジェクト,カプセル化,オブジェクト
オブジェクト指向で、いくつかのオブジェクトに共通する性質を抜き出して、属性・手続きを一般化(抽象化)して新しく定義したもの。またはプログラムの単位。,インスタンス,カプセル化,クラス,ポインタ,クラス
オブジェクト指向で、クラスの定義情報から生成された、具体的なデータをもつ実体のこと。,カプセル化,インスタンス,リカーシブ,MIPS,インスタンス
オブジェクト指向で、データ(属性)とそのデータに対する手続きをひとつにまとめること。,キュー,リスト,カプセル化,クラス,カプセル化
実行中に自分自身を呼び出ししても、正しく実行することができるプログラムの性質。,リカーシブ,リロケータブル,リユーザブル,リエントラント,リカーシブ
主記憶上のどのアドレスに配置しても、正しく実行することができるプログラムの性質。,リユーザブル,リエントラント,リロケータブル,リカーシブ,リロケータブル
複数のタスクが同時に共有して実行しても、正しく実行することができるプログラムの性質。,リカーシブ,リユーザブル,リエントラント,リロケータブル,リエントラント
一度実行した後、再ロードし直さずに実行しても、正しく実行することができるプログラムの性質。,リエントラント,リカーシブ,リユーザブル,リロケータブル,リユーザブル